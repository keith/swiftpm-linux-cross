#!/usr/bin/env python3

from pathlib import Path
from typing import List, Tuple
import argparse
import contextlib
import gzip
import json
import multiprocessing.pool
import os
import shutil
import subprocess
import sys
import tarfile
import tempfile
import urllib.error
import urllib.request

_FOCAL_PACKAGES = [
    "libbrotli-dev",
    "libc6",
    "libc6-dev",
    "libcurl4",
    "libcurl4-openssl-dev",
    "libgcc-9-dev",
    "libgcc-s1",
    "libicu-dev",
    "liblzma-dev",
    "libssl-dev",
    "libstdc++-9-dev",
    "libxml2-dev",
    "linux-libc-dev",
    "zlib1g-dev",
]
_BIONIC_PACKAGES = [
    "libc6",
    "libc6-dev",
    "libcurl4",
    "libcurl4-openssl-dev",
    "libgcc-7-dev",
    "libgcc1",
    "libicu-dev",
    "liblzma-dev",
    "libssl-dev",
    "libstdc++-7-dev",
    "libunwind-dev",
    "libxml2-dev",
    "linux-libc-dev",
    "zlib1g-dev",
]


class Arch:
    def __init__(
        self, id: str, swift_id: str, ubuntu_id: str, ubuntu_mirror: str
    ):
        self.id = id
        self.swift_id = swift_id
        self.ubuntu_id = ubuntu_id
        self.ubuntu_mirror = ubuntu_mirror


ARM64 = Arch(
    "arm64", "aarch64", "arm64", "http://ports.ubuntu.com/ubuntu-ports"
)
X86_64 = Arch(
    "x86_64", "x86_64", "amd64", "http://gb.archive.ubuntu.com/ubuntu"
)


def _build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--ubuntu-release",
        choices=("bionic", "focal"),
        default="focal",
        help="The target Ubuntu release you will run on",
    )
    parser.add_argument(
        "--arch",
        choices=("x86_64", "arm64"),
        default="x86_64",
        help="The target architecture to build for",
    )
    parser.add_argument(
        "--swift-version",
        default="5.6.2",
        help="The version of Swift you're building with and for",
    )
    parser.add_argument(
        "packages", nargs="*", help="Extra OS packages your build requires"
    )
    return parser


def _install_llvm() -> None:
    try:
        subprocess.check_call(
            ["brew", "--prefix", "llvm"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    except subprocess.CalledProcessError:
        print("Installing LLVM...")
        subprocess.check_call(["brew", "install", "llvm"])


def _setup_toolchain_root(os: str, arch: Arch, swift_version: str) -> Path:
    toolchain_dir = Path(f"toolchain-{os}-{arch.id}-{swift_version}")
    if toolchain_dir.is_dir():
        shutil.rmtree(toolchain_dir)
    elif toolchain_dir.exists():
        toolchain_dir.unlink()
    if toolchain_dir.exists():
        raise SystemExit(
            f"error: failed to remove '{toolchain_dir}', please delete it and re-run"
        )
    toolchain_dir.mkdir()
    return toolchain_dir


def _download_extract_swift(
    os: str, arch: Arch, swift_version: str, toolchain_dir: Path
) -> Path:
    if os == "focal":
        v1 = "ubuntu2004"
        v2 = "ubuntu20.04"
    elif os == "bionic":
        v1 = "ubuntu1804"
        v2 = "ubuntu18.04"
    else:
        raise SystemExit(f"error: unsupported os: {os}")

    arch_suffix = ""
    if arch.id == "arm64":
        arch_suffix = "-aarch64"

    swift_url = f"https://download.swift.org/swift-{swift_version}-release/{v1}{arch_suffix}/swift-{swift_version}-RELEASE/swift-{swift_version}-RELEASE-{v2}{arch_suffix}.tar.gz"
    swift_archive = Path(f"/tmp/swift-{os}-{arch.id}-{swift_version}.tar.gz")
    if not swift_archive.exists():
        print(f"Downloading Swift {swift_version} for {os}-{arch.id}...")
        # TODO: progress reporting
        urllib.request.urlretrieve(swift_url, swift_archive)

    print("Extracting Swift...")
    shutil.unpack_archive(swift_archive, toolchain_dir)
    return next(toolchain_dir.glob("swift-*"))


def _setup_swift_bin(swift_root: Path) -> Path:
    swift_bin = swift_root / "usr" / "cross-bin"
    swift_bin.mkdir()
    # shutil.copy("ar", swift_bin)
    os.symlink("/usr/bin/ar", swift_bin.absolute() / "ar")
    llvm_root = Path(
        subprocess.check_output(
            ["brew", "--prefix", "llvm"],
        )
        .decode()
        .strip()
    )
    os.symlink(llvm_root / "bin" / "ld.lld", swift_bin.absolute() / "ld.lld")
    subprocess.check_call(
        [
            "swiftc",
            "swift-autolink-extract.swift",
            "-o",
            swift_bin / "swift-autolink-extract",
        ]
    )
    return swift_bin


def _write_destination_file(
    arch: Arch,
    toolchain_dir: Path,
    swift_root: Path,
    swift_bin: Path,
    sdk_root: Path,
) -> Tuple[Path, Path]:
    contents = {
        "version": 1,
        "sdk": str(sdk_root.absolute()),
        "toolchain-bin-dir": str(swift_bin.absolute()),
        "target": f"{arch.swift_id}-unknown-linux-gnu",
        "extra-cc-flags": ["-fPIC"],
        "extra-cpp-flags": ["-lstdc++"],
        "extra-swiftc-flags": [
            "-use-ld=lld",
            "-Xlinker",
            "-rpath",
            "-Xlinker",
            "/usr/lib/swift/linux",
            "-tools-directory",
            str(swift_bin.absolute()),
            "-resource-dir",
            str((swift_root / "usr" / "lib" / "swift").absolute()),
            "-sdk",
            str(sdk_root.absolute()),
        ],
    }

    destination = toolchain_dir / "destination.json"
    with open(destination, "w") as f:
        json.dump(contents, f, indent=4)

    contents = {
        "version": 1,
        "sdk": str(sdk_root.absolute()),
        "toolchain-bin-dir": str(swift_bin.absolute()),
        "target": f"{arch.swift_id}-unknown-linux-gnu",
        "extra-cc-flags": ["-fPIC"],
        "extra-cpp-flags": ["-lstdc++"],
        "extra-swiftc-flags": [
            "-use-ld=lld",
            "-Xlinker",
            "-rpath",
            "-Xlinker",
            "/usr/lib/swift/linux",
            "-tools-directory",
            str(swift_bin.absolute()),
            "-resource-dir",
            str((swift_root / "usr" / "lib" / "swift_static").absolute()),
            "-sdk",
            str(sdk_root.absolute()),
        ],
    }

    destination_static = toolchain_dir / "destination_static.json"
    with open(destination_static, "w") as f:
        json.dump(contents, f, indent=4)

    return destination, destination_static


@contextlib.contextmanager
def restore_pwd():
    pwd = os.getcwd()
    try:
        yield
    finally:
        os.chdir(pwd)


def _download_and_extract_package(
    name: str, url: str, package_dir: Path
) -> None:
    name = url.split("/")[-1]
    output_path = Path(f"/tmp/{name}.deb")
    try:
        urllib.request.urlretrieve(url, output_path)
    except urllib.error.HTTPError as e:
        print(
            f"error: failed to download {name} from {url}: {e}",
            file=sys.stderr,
        )
        raise
    with tempfile.TemporaryDirectory() as dirname:
        with restore_pwd():
            os.chdir(dirname)
            subprocess.check_call(["ar", "x", output_path])
            with tarfile.open("data.tar.xz") as f:
                f.extractall(package_dir)


def _download_packages(
    os: str, arch: Arch, packages: List[str], package_dir: Path
) -> None:
    package_archive = Path(f"/tmp/packages-{os}-{arch.id}.gz")
    if not package_archive.exists():
        print(f"Downloading package list for {os}-{arch.id}...")
        package_url = f"{arch.ubuntu_mirror}/dists/{os}/main/binary-{arch.ubuntu_id}/Packages.gz"
        # TODO: progress reporting
        urllib.request.urlretrieve(package_url, package_archive)

    with gzip.open(package_archive, "rb") as f:
        files = [
            x
            for x in f.read().decode().splitlines()
            if x.startswith("Filename: ")
        ]

    if os == "focal":
        os_packages = _FOCAL_PACKAGES
    elif os == "bionic":
        os_packages = _BIONIC_PACKAGES
    else:
        raise SystemExit(f"error: unsupported os: {os}")

    os_packages += packages

    package_paths = {}
    needed_packages = set(os_packages)
    for filename in files:
        if not needed_packages:
            break
        for package in needed_packages:
            # Filename: pool/main/c/curl/libcurl4-openssl-dev_7.68.0-1ubuntu2_amd64.deb
            last_component = filename.split("/")[-1]
            if last_component.startswith(f"{package}_"):
                package_paths[package] = filename.split(" ")[-1]
                needed_packages.remove(package)
                break

    missing_packages = set(os_packages) - set(package_paths.keys())
    if missing_packages:
        raise SystemExit(
            "Failed to find some packages, please report this issue: {}".format(
                " ".join(sorted(missing_packages))
            )
        )

    pool = multiprocessing.pool.Pool()
    results = []
    for name, path in package_paths.items():
        results.append(
            pool.apply_async(
                _download_and_extract_package,
                (name, f"{arch.ubuntu_mirror}/{path}", package_dir.absolute()),
            )
        )

    pool.close()
    pool.join()

    for result in results:
        if not result.successful():
            raise SystemExit(f"error: {result.get()}")

    broken_libraries_dir = (
        package_dir / "usr" / "lib" / f"{arch.swift_id}-linux-gnu"
    )
    destination_dir = package_dir / "lib" / f"{arch.swift_id}-linux-gnu"
    _fix_package_symlinks(broken_libraries_dir, destination_dir)
    broken_libraries_dir = next(
        (
            package_dir / "usr" / "lib" / "gcc" / f"{arch.swift_id}-linux-gnu"
        ).glob("*")
    )
    _fix_package_symlinks(broken_libraries_dir, broken_libraries_dir)


def _fix_package_symlinks(
    broken_libraries_dir: Path, destination_dir: Path
) -> None:
    assert broken_libraries_dir.exists()
    assert destination_dir.exists()
    for lib in broken_libraries_dir.glob("*.so*"):
        # Ignore valid symlinks or normal files
        if not lib.is_symlink() or lib.exists():
            continue

        # TODO: Ideally this would be relative to be more portable
        dest = (destination_dir / lib.readlink().name).absolute()
        if not dest.exists():
            # TODO: Ideally no invalid symlinks would remain, but some do
            continue

        lib.unlink()
        lib.symlink_to(dest)


def _apply_static_fixups(swift_root: Path) -> None:
    dynamic_lib_dir = swift_root / "usr" / "lib" / "swift"
    static_lib_dir = swift_root / "usr" / "lib" / "swift_static"
    shutil.copytree(
        dynamic_lib_dir / "_InternalSwiftSyntaxParser",
        static_lib_dir / "_InternalSwiftSyntaxParser",
    )
    shutil.copy(
        dynamic_lib_dir / "linux" / "lib_InternalSwiftSyntaxParser.so",
        static_lib_dir / "linux",
    )
    shutil.copytree(
        dynamic_lib_dir / "_InternalSwiftScan",
        static_lib_dir / "_InternalSwiftScan",
    )
    shutil.copy(
        dynamic_lib_dir / "linux" / "lib_InternalSwiftScan.so",
        static_lib_dir / "linux",
    )


def _main(
    os: str, arch: Arch, swift_version: str, packages: List[str]
) -> None:
    _install_llvm()
    toolchain_dir = _setup_toolchain_root(os, arch, swift_version)
    swift_root = _download_extract_swift(
        os, arch, swift_version, toolchain_dir
    )
    swift_bin = _setup_swift_bin(swift_root)
    _apply_static_fixups(swift_root)
    sdk_root = toolchain_dir / "packages"
    _download_packages(os, arch, packages, sdk_root)
    destination, static_destination = _write_destination_file(
        arch, toolchain_dir, swift_root, swift_bin, sdk_root
    )

    print(
        f"""\
Done! To use run:

swift build --destination {destination.absolute()}

Or for static stdlib builds run:

swift build --static-swift-stdlib --destination {static_destination.absolute()}\
"""
    )


if __name__ == "__main__":
    args = _build_parser().parse_args()
    if args.arch == "x86_64":
        arch = X86_64
    elif args.arch == "arm64":
        arch = ARM64
    else:
        raise SystemExit(f"error: invalid arch: {args.arch}")

    if args.arch == "arm64" and args.ubuntu_release == "bionic":
        raise SystemExit(
            f"error: Swift didn't vendor arm64 toolchains until Ubuntu Focal"
        )

    _main(args.ubuntu_release, arch, args.swift_version, args.packages)
